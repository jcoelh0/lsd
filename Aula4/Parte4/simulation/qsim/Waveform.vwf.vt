// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/13/2017 22:13:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FreqDivider
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FreqDivider_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clkIn;
reg [31:0] k;
// wires                                               
wire clkOut;

// assign statements (if any)                          
FreqDivider i1 (
// port map - connection between master ports and signals/registers   
	.clkIn(clkIn),
	.clkOut(clkOut),
	.k(k)
);
initial 
begin 
#1000000 $finish;
end 

// clkIn
always
begin
	clkIn = 1'b0;
	clkIn = #10000 1'b1;
	#10000;
end 
// k[ 31 ]
initial
begin
	k[31] = 1'b0;
	k[31] = #970000 1'b1;
end 
// k[ 30 ]
initial
begin
	k[30] = 1'b0;
	k[30] = #970000 1'b1;
end 
// k[ 29 ]
initial
begin
	k[29] = 1'b0;
	k[29] = #970000 1'b1;
end 
// k[ 28 ]
initial
begin
	k[28] = 1'b0;
	k[28] = #970000 1'b1;
end 
// k[ 27 ]
initial
begin
	k[27] = 1'b0;
	k[27] = #970000 1'b1;
end 
// k[ 26 ]
initial
begin
	k[26] = 1'b0;
	k[26] = #970000 1'b1;
end 
// k[ 25 ]
initial
begin
	k[25] = 1'b0;
	k[25] = #970000 1'b1;
end 
// k[ 24 ]
initial
begin
	k[24] = 1'b0;
	k[24] = #970000 1'b1;
end 
// k[ 23 ]
initial
begin
	k[23] = 1'b0;
	k[23] = #970000 1'b1;
end 
// k[ 22 ]
initial
begin
	k[22] = 1'b0;
	k[22] = #970000 1'b1;
end 
// k[ 21 ]
initial
begin
	k[21] = 1'b0;
	k[21] = #970000 1'b1;
end 
// k[ 20 ]
initial
begin
	k[20] = 1'b0;
	k[20] = #970000 1'b1;
end 
// k[ 19 ]
initial
begin
	k[19] = 1'b0;
	k[19] = #970000 1'b1;
end 
// k[ 18 ]
initial
begin
	k[18] = 1'b0;
	k[18] = #970000 1'b1;
end 
// k[ 17 ]
initial
begin
	k[17] = 1'b0;
	k[17] = #970000 1'b1;
end 
// k[ 16 ]
initial
begin
	k[16] = 1'b0;
	k[16] = #970000 1'b1;
end 
// k[ 15 ]
initial
begin
	k[15] = 1'b0;
	k[15] = #970000 1'b1;
end 
// k[ 14 ]
initial
begin
	k[14] = 1'b0;
	k[14] = #970000 1'b1;
end 
// k[ 13 ]
initial
begin
	k[13] = 1'b0;
	k[13] = #970000 1'b1;
end 
// k[ 12 ]
initial
begin
	k[12] = 1'b0;
	k[12] = #970000 1'b1;
end 
// k[ 11 ]
initial
begin
	k[11] = 1'b0;
	k[11] = #970000 1'b1;
end 
// k[ 10 ]
initial
begin
	k[10] = 1'b0;
	k[10] = #970000 1'b1;
end 
// k[ 9 ]
initial
begin
	k[9] = 1'b0;
	k[9] = #970000 1'b1;
end 
// k[ 8 ]
initial
begin
	k[8] = 1'b0;
	k[8] = #970000 1'b1;
end 
// k[ 7 ]
initial
begin
	k[7] = 1'b0;
	k[7] = #970000 1'b1;
end 
// k[ 6 ]
initial
begin
	k[6] = 1'b0;
	k[6] = #970000 1'b1;
end 
// k[ 5 ]
initial
begin
	k[5] = 1'b0;
	k[5] = #970000 1'b1;
end 
// k[ 4 ]
initial
begin
	k[4] = 1'b0;
	k[4] = #970000 1'b1;
end 
// k[ 3 ]
initial
begin
	k[3] = 1'b0;
	k[3] = #970000 1'b1;
end 
// k[ 2 ]
initial
begin
	k[2] = 1'b0;
	k[2] = #970000 1'b1;
end 
// k[ 1 ]
initial
begin
	k[1] = 1'b0;
	k[1] = #10000 1'b1;
end 
// k[ 0 ]
initial
begin
	k[0] = 1'b0;
	k[0] = #10000 1'b1;
end 
endmodule

